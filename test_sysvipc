#!/usr/bin/env ruby
#
#    $Source$
#
#    $Revision$
#    $Date$
#
#    Copyright (c) 2006 James Steven Jenkins.
#

require 'sysvipc'
require 'test/unit'

include SystemVIPC

KEY = ftok(__FILE__, 0)

NSEMS = 16
NMSGS = 16
SHMSIZE = 1024

class TestCradle < Test::Unit::TestCase

  def setup
  end

  def test_msg

    msg = MessageQueue.new(KEY, IPC_CREAT | 0660)
    assert MessageQueue === msg

    uid = Process.uid
    gid = Process.gid
    perm = Permission.new(msg)
    assert Permission === perm
    assert uid == perm.uid
    assert gid == perm.gid
    assert uid == perm.cuid
    assert gid == perm.cgid

    1.upto(NMSGS) do |i|
      assert msg == msg.send(i, "message #{i}")
    end

    NMSGS.downto(1) do |i|
      assert "message #{i}" == msg.recv(i, 100)
    end

    msg.remove

  end

  def test_sem

    sem = Semaphore.new(KEY, NSEMS, IPC_CREAT | 0660)
    assert Semaphore === sem

    uid = Process.uid
    gid = Process.gid
    perm = Permission.new(sem)
    assert Permission === perm
    assert uid == perm.uid
    assert gid == perm.gid
    assert uid == perm.cuid
    assert gid == perm.cgid

    assert sem.size == NSEMS

    NSEMS.times do |i|
      assert sem == sem.set_value(i, 2)
      assert 2 == sem.value(i)
    end

    values = Array.new(NSEMS, 1)
    assert sem == sem.set_all(values)
    assert values == sem.to_a

    pid = Process.pid
    NSEMS.times do |i|
      assert pid == sem.pid(i)
      assert 0 == sem.n_count(i)
      assert 0 == sem.z_count(i)
    end

    acquire = []
    release = []
    NSEMS.times do |i|
      op = SemaphoreOperation.new(i, -1)
      assert i == op.pos
      assert -1 == op.value
      assert 0 == op.flags
      acquire << op

      op = SemaphoreOperation.new(i, 1)
      assert i == op.pos
      assert 1 == op.value
      assert 0 == op.flags
      release << op
    end

    assert sem == sem.apply(acquire)
    assert sem == sem.apply(release)

    sem.remove

  end

  def test_shm

    shm = SharedMemory.new(KEY, SHMSIZE, IPC_CREAT | 0660)
    assert SharedMemory === shm

    assert SHMSIZE === shm.size

    assert shm == shm.attach

    data = ''
    SHMSIZE.times do |i|
      data << 'A'
    end
    assert shm == shm.write(data)
    assert data == shm.read(SHMSIZE)

    assert shm == shm.detach

    shm.remove

  end

  def teardown
  end

end
