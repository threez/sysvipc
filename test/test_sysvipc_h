#!/usr/bin/env ruby
#
#    $Source$
#
#    $Revision$
#    $Date$
#
#    Copyright (c) 2006 James Steven Jenkins.
#

$:.unshift File.join(File.dirname(__FILE__), '../ext')
$:.unshift File.join(File.dirname(__FILE__), '../lib')

require 'test/unit'
require 'timeout'

require 'SysVIPC'

include SysVIPC

MODE = 0660
NSEMS = 16
NSEMOPS = 5
NMSGS = 16
SEMVAL = 10
SHMSIZE = 1024
SHMTEXT = 'this is a test'

class TestSysVIPC < Test::Unit::TestCase

  def setup
  end

  def test_msg

    # Create a message queue.

    msg = MessageQueue.new(IPC_PRIVATE, IPC_CREAT | MODE)
    assert_not_nil(msg)

    # Get Msqid_ds.

    msqid_ds = msg.msqid_ds
    assert_instance_of(Msqid_ds, msqid_ds)

    assert_equal(Process.uid, msqid_ds.msg_perm.uid)
    assert_equal(Process.gid, msqid_ds.msg_perm.gid)
    assert_equal(MODE, msqid_ds.msg_perm.mode)

    assert_equal(0, msqid_ds.msg_qnum)
    assert_operator(0, :<, msqid_ds.msg_qbytes)

    # Set Msqid_ds.

    msg.msqid_ds = msqid_ds

    # Check Msqid_ds again.

    msqid_ds = msg.msqid_ds

    assert_equal(Process.uid, msqid_ds.msg_perm.uid)
    assert_equal(Process.gid, msqid_ds.msg_perm.gid)
    assert_equal(MODE, msqid_ds.msg_perm.mode)

    # Test send/receive with processes.

    Process.fork do
      NMSGS.times do |i|
	mtype = i + 1
	mtext = "message #{i}"
	assert_not_equal(-1, msg.send(mtype, mtext))
      end
    end
    NMSGS.times do |i|
      mtype = i + 1
      msize = 100
      assert_equal("message #{i}", msg.receive(mtype, msize))
    end
    Process.wait

    # Test send/receive with threads.

    t = Thread.new do
      NMSGS.times do |i|
	mtype = i + 1
	mtext = "message #{i}"
	assert_not_equal(-1, msg.send(mtype, mtext))
      end
    end
    NMSGS.times do |i|
      mtype = i + 1
      msize = 100
      assert_equal("message #{i}", msg.receive(mtype, msize))
    end
    t.join

    # Read from an empty queue.

    Timeout::timeout(1) do
      assert_raise(Errno::ENOMSG) do
	msg.receive(1, 10, IPC_NOWAIT)
      end
    end

    # Read a truncated message.

    assert_not_equal(-1, msg.send(1, 'a few bytes'))
    assert_raise(Errno::E2BIG) do
      t = msg.receive(1, 1)
    end
    assert_equal('a', msg.receive(1, 1, MSG_NOERROR))

    # Remove message queue.

    msg.rm

  end

  def test_sem

    # Create a semaphore set.

    sem = Semaphore.new(IPC_PRIVATE, NSEMS, IPC_CREAT | MODE)
    assert_not_nil(sem)

    # Initalize semaphore set.

    values = []
    1.upto(NSEMS) { |i| values << 2 * i + 1}
    sem.setall(values)

    # Check initialized values.

    assert_equal(values, sem.getall)

    # Set a single semaphore value.

    sem.setval(0, SEMVAL)

    # Get single semaphore value.
    
    assert_equal(SEMVAL, sem.val(0))

    # Check PID.

    assert_equal(Process.pid, sem.getpid)
    assert_equal(Process.pid, sem.pid)

    # Get wait counts.

    assert_equal(0, sem.ncnt)
    assert_equal(0, sem.zcnt)

    # Get Semid_ds.

    semid_ds = sem.semid_ds
    assert_instance_of(Semid_ds, semid_ds)

    assert_equal(NSEMS, semid_ds.sem_nsems)

    assert_equal(Process.uid, semid_ds.sem_perm.uid)
    assert_equal(Process.gid, semid_ds.sem_perm.gid)
    assert_equal(MODE, semid_ds.sem_perm.mode)

    # Set Semid_ds.

    sem.semid_ds =semid_ds

    # Check Semid_ds again.

    semid_ds = sem.semid_ds

    assert_equal(NSEMS, semid_ds.sem_nsems)

    assert_equal(Process.uid, semid_ds.sem_perm.uid)
    assert_equal(Process.gid, semid_ds.sem_perm.gid)
    assert_equal(MODE, semid_ds.sem_perm.mode)

    # Build acquire/release operation arrays.

    acquire = []
    release = []
    NSEMOPS.times do |i|
      asb = Sembuf.new(i, -1)
      acquire << asb

      rsb = Sembuf.new(i, 1)
      release << rsb
    end

    # Initialize semaphores for acquire/release test.

    sem.setall(Array.new(NSEMS, 1))

    # Test acquire/release with processes.

    rd, wr = IO.pipe
    wr.write '1'
    sem.op(acquire)
    Process.fork do
      rd.close
      wr.write '2'
      sem.op(acquire)
      wr.write '4'
      sem.op(release)
      wr.write '5'
      wr.close
    end
    sleep 1
    wr.write '3'
    sem.op(release)
    wr.close
    Process.wait
    assert_equal('12345', rd.read)
    rd.close

    # Test acquire/release with threads.

    seq = '1'
    sem.op(acquire)
    t = Thread.new do
      seq << '2'
      sem.op(acquire)
      seq << '4'
      sem.op(release)
      seq << '5'
    end
    sleep 1
    seq << '3'
    sem.op(release)
    t.join
    assert_equal('12345', seq)

    # Test non-blocking acquire.

    acquire.first.sem_flg = IPC_NOWAIT
    sem.op(acquire)
    Timeout::timeout(1) do
      assert_raise(Errno::EAGAIN) { sem.op(acquire) }
    end
    sem.op(release)

    # Remove semaphore set.

    sem.rm

  end

  def test_shm

    # Create a shared memory segment.

    shm = SharedMemory.new(IPC_PRIVATE, SHMSIZE, IPC_CREAT | MODE)
    assert_not_nil(shm)

    # Get Shmid_ds.

    shmid_ds = shm.shmid_ds
    assert_instance_of(Shmid_ds, shmid_ds)

    assert_equal(Process.uid, shmid_ds.shm_perm.uid)
    assert_equal(Process.gid, shmid_ds.shm_perm.gid)
    assert_equal(MODE, shmid_ds.shm_perm.mode)

    # Set Shmid_ds.

    shm.shmid_ds = shmid_ds

    # Check Shmid_ds again.

    shmid_ds = shm.shmid_ds

    assert_equal(Process.uid, shmid_ds.shm_perm.uid)
    assert_equal(Process.gid, shmid_ds.shm_perm.gid)
    assert_equal(MODE, shmid_ds.shm_perm.mode)

    # Attach shared memory segment.

    segment = nil
    assert_nothing_raised { segment = shm.attach(segment) }

    # Test write/read with processes.

    Process.fork do
      segment.write(SHMTEXT[0..1], 0)
      segment.write(SHMTEXT[2..-1], 2)
    end
    Process.wait

    assert_equal(SHMTEXT, segment.read(SHMTEXT.length, 0))
    assert_equal(SHMTEXT[2..-1], segment.read(SHMTEXT.length - 2, 2))

    # Test write/read with threads.

    t = Thread.new do
      segment.write(SHMTEXT[0..1], 0)
      segment.write(SHMTEXT[2..-1], 2)
    end
    t.join

    assert_equal(SHMTEXT, segment.read(SHMTEXT.length, 0))
    assert_equal(SHMTEXT[2..-1], segment.read(SHMTEXT.length - 2, 2))

    # Detach shared memory segment.

    assert_nothing_raised { shm.detach(segment) }

    # Remove shared memory segment.

    shm.rm

  end

  def teardown
  end

end
