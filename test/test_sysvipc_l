#!/usr/bin/env ruby
#
#    $Source$
#
#    $Revision$
#    $Date$
#
#    Copyright (c) 2006 James Steven Jenkins.
#

$:.unshift File.join(File.dirname(__FILE__), '../ext')

require 'test/unit'
require 'timeout'

require 'SysVIPC.so'

include SysVIPC

MODE = 0660
NSEMS = 16
NSEMOPS = 5
NMSGS = 16
SEMVAL = 10
SHMSIZE = 1024
SHMTEXT = 'this is a test'

class TestSysVIPC < Test::Unit::TestCase

  def setup
  end

  def test_msg

    # Create a message queue.

    msgid = msgget(IPC_PRIVATE, IPC_CREAT | MODE)
    assert_not_equal(-1, msgid)

    # Get Msqid_ds

    res, msqid_ds = msgctl(msgid, IPC_STAT)
    assert_not_equal(-1, res)
    assert_instance_of(Msqid_ds, msqid_ds)

    assert_equal(Process.uid, msqid_ds.msg_perm.uid)
    assert_equal(Process.gid, msqid_ds.msg_perm.gid)
    assert_equal(MODE, msqid_ds.msg_perm.mode)

    assert_equal(0, msqid_ds.msg_qnum)
    assert_operator(0, :<, msqid_ds.msg_qbytes)

    # Set Msqid_ds.

    assert_not_equal(-1, msgctl(msgid, IPC_SET, msqid_ds))

    # Check Msqid_ds again.

    res, msqid_ds = msgctl(msgid, IPC_STAT)
    assert_not_equal(-1, res)

    assert_equal(Process.uid, msqid_ds.msg_perm.uid)
    assert_equal(Process.gid, msqid_ds.msg_perm.gid)
    assert_equal(MODE, msqid_ds.msg_perm.mode)

    # Test send/receive with processes.

    Process.fork do
      NMSGS.times do |i|
	assert_not_equal(-1, msgsnd(msgid, i + 1, "message #{i}", 0))
      end
    end
    NMSGS.times do |i|
      res, mtype, mtext = msgrcv(msgid, 100, i + 1, 0)
      assert_not_equal(-1, res)
      assert_equal(i + 1, mtype)
      assert_equal("message #{i}", mtext)
    end
    Process.wait

    # Test send/receive with threads.

    t = Thread.new do
      NMSGS.times do |i|
	assert_not_equal(-1, msgsnd(msgid, i + 1, "message #{i}", 0))
      end
    end
    NMSGS.times do |i|
      res, mtype, mtext = msgrcv(msgid, 100, i + 1, 0)
      assert_not_equal(-1, res)
      assert_equal(i + 1, mtype)
      assert_equal("message #{i}", mtext)
    end
    t.join

    # Read from an empty queue.

    assert_nothing_raised do
      Timeout::timeout(1) do
	res, mtype, mtext = msgrcv(msgid, 10, 1, IPC_NOWAIT)
	assert_equal(-1, res)
	assert_equal(Errno::ENOMSG::Errno, SysVIPC.errno)
      end
    end

    # Read a truncated message.

    assert_not_equal(-1, msgsnd(msgid, 1, 'a few bytes', 0))
    res, mtype, mtext = msgrcv(msgid, 1, 1, 0)
    assert_equal(-1, res)
    assert_equal(Errno::E2BIG::Errno, SysVIPC.errno)
    res, mtype, mtext = msgrcv(msgid, 1, 1, MSG_NOERROR)
    assert_not_equal(-1, res)
    assert_equal(1, mtype)
    assert_equal('a', mtext)

    # Remove message queue.

    assert_not_equal(-1, msgctl(msgid, IPC_RMID, nil))

  end

  def test_sem

    # Create a semaphore set.

    semid = semget(IPC_PRIVATE, NSEMS, IPC_CREAT | MODE)
    assert_not_equal(-1, semid)

    # Initalize semaphore set.

    values = []
    1.upto(NSEMS) { |i| values << 2 * i + 1}
    semun = Semun.new
    semun.array = values
    assert_equal(values, semun.array)
    assert_not_equal(-1, semctl(semid, 0, SETALL, semun))
    assert_equal(values, semun.array)

    # Check initialized values.

    res, semun = semctl(semid, 0, GETALL)
    assert_not_equal(-1, res)
    assert_kind_of(Semun, semun)
    assert_equal(values, semun.array)

    # Set a single semaphore value.

    semun.val = SEMVAL
    assert_not_equal(-1, semctl(semid, 0, SETVAL, semun))

    # Get single semaphore value.
    
    assert_equal(SEMVAL, semctl(semid, 0, GETVAL))

    # Check PID.

    assert_equal(Process.pid, semctl(semid, 0, GETPID))

    # Get wait counts.

    assert_equal(0, semctl(semid, 0, GETNCNT))
    assert_equal(0, semctl(semid, 0, GETZCNT))

    # Get Semid_ds.

    semun.buf = Semid_ds.new
    assert_not_equal(-1, semctl(semid, 0, IPC_STAT, semun))
    assert_instance_of(Semid_ds, semun.buf)

    assert_equal(NSEMS, semun.buf.sem_nsems)

    assert_equal(Process.uid, semun.buf.sem_perm.uid)
    assert_equal(Process.gid, semun.buf.sem_perm.gid)
    assert_equal(MODE, semun.buf.sem_perm.mode)

    # Set Semid_ds.

    assert_not_equal(-1, semctl(semid, 0, IPC_SET, semun))

    # Check Semid_ds again.

    assert_not_equal(-1, semctl(semid, 0, IPC_STAT, semun))

    assert_equal(NSEMS, semun.buf.sem_nsems)

    assert_equal(Process.uid, semun.buf.sem_perm.uid)
    assert_equal(Process.gid, semun.buf.sem_perm.gid)
    assert_equal(MODE, semun.buf.sem_perm.mode)

    # Build acquire/release operation arrays.

    acquire = []
    release = []
    NSEMOPS.times do |i|
      asb = Sembuf.new
      asb.sem_num = i
      asb.sem_op = -1
      asb.sem_flg = 0
      acquire << asb

      rsb = Sembuf.new
      rsb.sem_num = i
      rsb.sem_op = 1
      rsb.sem_flg = 0
      release << rsb
    end

    # Initialize semaphores for acquire/release test.

    semun.array = Array.new(NSEMS, 1)
    assert_not_equal(-1, semctl(semid, 0, SETALL, semun))

    # Test acquire/release with processes.

    rd, wr = IO.pipe
    wr.write '1'
    assert_not_equal(-1, semop(semid, acquire, NSEMOPS))
    Process.fork do
      rd.close
      wr.write '2'
      assert_not_equal(-1, semop(semid, acquire, NSEMOPS))
      wr.write '4'
      assert_not_equal(-1, semop(semid, release, NSEMOPS))
      wr.write '5'
      wr.close
    end
    sleep 1
    wr.write '3'
    assert_not_equal(-1, semop(semid, release, NSEMOPS))
    wr.close
    Process.wait
    assert_equal('12345', rd.read)
    rd.close

    # Test acquire/release with threads.

    seq = '1'
    assert_not_equal(-1, semop(semid, acquire, NSEMOPS))
    t = Thread.new do
      seq << '2'
      assert_not_equal(-1, semop(semid, acquire, NSEMOPS))
      seq << '4'
      assert_not_equal(-1, semop(semid, release, NSEMOPS))
      seq << '5'
    end
    sleep 1
    seq << '3'
    assert_not_equal(-1, semop(semid, release, NSEMOPS))
    t.join
    assert_equal('12345', seq)

    # Test non-blocking acquire.

    acquire.first.sem_flg = IPC_NOWAIT
    assert_not_equal(-1, semop(semid, acquire, NSEMOPS))
    assert_nothing_raised do
      Timeout::timeout(1) do
	assert_equal(-1, semop(semid, acquire, NSEMOPS))
	assert_equal(Errno::EAGAIN::Errno, SysVIPC.errno)
      end
    end
    assert_not_equal(-1, semop(semid, release, NSEMOPS))

    # Remove semaphore set.

    assert_not_equal(-1, semctl(semid, 0, IPC_RMID))

  end

  def test_shm

    # Create a shared memory segment.

    shmid = shmget(IPC_PRIVATE, SHMSIZE, IPC_CREAT | MODE)
    assert_not_equal(-1, shmid)

    # Get Shmid_ds

    res, shmid_ds = shmctl(shmid, IPC_STAT)
    assert_not_equal(-1, res)
    assert_instance_of(Shmid_ds, shmid_ds)

    assert_equal(Process.uid, shmid_ds.shm_perm.uid)
    assert_equal(Process.gid, shmid_ds.shm_perm.gid)
    assert_equal(MODE, shmid_ds.shm_perm.mode)

    # Set Shmid_ds.

    assert_not_equal(-1, shmctl(shmid, IPC_SET, shmid_ds))

    # Check Shmid_ds again.

    res, shmid_ds = shmctl(shmid, IPC_STAT)
    assert_not_equal(-1, res)

    assert_equal(Process.uid, shmid_ds.shm_perm.uid)
    assert_equal(Process.gid, shmid_ds.shm_perm.gid)
    assert_equal(MODE, shmid_ds.shm_perm.mode)

    # Attach shared memory segment.

    assert_not_equal(-1, segment = shmat(shmid, nil, 0))

    # Test write/read with processes.

    Process.fork do
      shmwrite(segment, SHMTEXT[0..1], 0)
      shmwrite(segment, SHMTEXT[2..-1], 2)
    end
    Process.wait

    assert_equal(SHMTEXT, shmread(segment, SHMTEXT.length, 0))
    assert_equal(SHMTEXT[2..-1], shmread(segment, SHMTEXT.length - 2, 2))

    # Test write/read with threads.

    t = Thread.new do
      shmwrite(segment, SHMTEXT[0..1], 0)
      shmwrite(segment, SHMTEXT[2..-1], 2)
    end
    t.join

    assert_equal(SHMTEXT, shmread(segment, SHMTEXT.length, 0))
    assert_equal(SHMTEXT[2..-1], shmread(segment, SHMTEXT.length - 2, 2))

    # Detach shared memory segment.

    assert_not_equal(-1, shmdt(segment))

    # Remove shared memory segment.

    assert_not_equal(-1, shmctl(shmid, IPC_RMID, nil))

  end

  def teardown
  end

end
